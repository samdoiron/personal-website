(+ 1 2 3)
(* 123 123 123 123)
(require '[ring.adapter.jetty :as ring-jetty]
)
(require site.core)
(use 'site-core)
(require '[site-core])
(require '[site/site-core])
(require '[site/site.core])
(handler [10])
(site.core/handler 10)
(site/site.core/handler 10)
(require '[ring.adapter.jetty :as ring-jetty])
(use 'site.core)
(handler 10)
(hello-handler 10)
(ring-jetty/run-jetty hello-handler {:port 3000})
(conj "hi" "there")
(str/join "hi" "there")
(str "hi there" "world")
(replace "hi there" "hi" "hello")
(use 'clojure.string)
(require 'clojure.string)
(clojure.string/replace "hello world", "hello", "hi")
(str/replace "hello world", "hello", "hi")
(use 'site.core :reload)
(read-css)
(remove-newlines "hello\nworld")
(seq "hi there")
(string->vec "hi there")
(vec->string "hello")
(vec->string ["hi there", "world"])
(-> "hello world" string->vec vec->string)
(use 'site.core :reload)
(read-css)
(remove-newlines "hello\nworld")
(string->vec "hello\nworld")
(use 'site.core :reload)
(read-css)
(use 'site.core :reload)
(navigation-item { :url "hi" :title "there" })
(* 10 10 10)
(* 1 2 3)
(require '[clojure.tools.namespace.repl :as repl])
(repl/refresh)
(styles)
(repl/refresh)
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(list-articles)
(map (+1) (list 1 2 3))
(map (list 1 2 3) (+1))
(map incr (list 1 2 3))
(inc 1)
(map inc (list 1 2 3)
)
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(map (+1) (list 1 2 3))
(list-articles)
(list articles)
(article-paths)
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(article-paths)
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(article-paths)
{foo: "bar"}
{:foo "bar"}
(:foo {:foo "bar"})
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(repl/refresh)
(require '[clojure.tools.namespace.repl :as repl]) (repl/refresh)
(defn r [] (use 'site.core :reload))
(r)
(list-articles)
(load-article "000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(load-custom-script "0000-hello-world")
(r)
(name->path "0000-hello-world")
(load-custom-file "0000-hello-world" "script.js")
(r)
(load-articles)
(r)
(load-articles)
(r)
(load-articles)
(defn r (use 'site.core :reload))
(defn r (use '[site.core] :reload))
(defn r (use [site.core] :reload))
(defn r (use ['site.core] :reload))
(use 'site.core :reload)
(defn r [] (use 'site.core :reload))
(r)
(load-articles)
(def article (load-article "0000-hello-world")
)
article
(split-meta-and-content (:content article))
(def article (load-article "0000-hello-world")
)
(split-meta-and-content (:content article))
(:foo {:bar "baz"})
(r)
(split-meta-and-content (:content article))
(r)
(defn r [] (use 'site.core :reload))
(r)
(load-articles)
(def article (first (load-articles)))
article
(def article (last (load-articles)))
article
(:meta article)
(:metadata article)
(r)
(defn r [] (use 'site.core :reload))
(r)
(def article (last (load-articcles)))
(def article (last (load-articles)))
article
(load-article-file "0000-hello-world" "content.md")
_
(split-content-and-meta *1)
(def metadata (last *1))
metadata
(parse-toml metadata)
(or false "hello")
(or "hello" "world")
(r)
metadata
(parse-metadata metadata)
(r)
(load-articles)
(def article (last *1))
article
(load-articles)
(def article (last *1))
article
(load-articles)
(r)
(load-articles)
(r)
(load-articles)
(def article (last *1))
article
(:metadata article)
(load-articles)
(r)
(defn r [] (use 'site.core :reload))
(r)
(defn r [] (use 'site.core :reload))
(defn r [] (do (use 'site.core :reload) (use 'site.views :reload)))
(r)
(defn r [] ( use 'site.core :reload))
(r)
(serve-static "foo")
(r)
(serve-static "foo")
(r)
(serve-static ""style.css
(serve-static "style.css")
(serve-static "site.css")
(r)
(keys {:foo "bar"})
(values {:foo "bar"})
(vals {:foo "bar"})
views
(site.views)
(require [site.views :as views)
(require '[site.views :as views])
views
(views/article)
(views/article (first (load-articles)))
